#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
void lft(TreeNode<int>*root, vector<int>&lfs)
{
    TreeNode<int>*curr = root->left;
    while(curr!=NULL)
    {
     if(curr->left!=NULL||curr->right!=NULL)
     {
      lfs.push_back(curr->data); 
     }
     if(curr->left!=NULL)
     {
         curr = curr->left;
     }
     else
     {
         curr = curr->right;
     }
      
    }
}
void rft(TreeNode<int>*root, vector<int>&rfs)
{
    TreeNode<int>*curr = root->right;
    while(curr!=NULL)
    {
     if(curr->left!=NULL||curr->right!=NULL)
     {
      rfs.push_back(curr->data); 
     }
     if(curr->right!=NULL)
     {
         curr = curr->right;
     }
     else
     {
         curr = curr->left;
     }
    }
}
void leaf(TreeNode<int>*root,vector<int>&lf)
{
    if(root==NULL) return;
    leaf(root->left,lf);
    if(root->right==NULL && root->left==NULL)
    {
        lf.push_back(root->data);
    }
    leaf(root->right,lf);  
}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int>lf,lfs,rfs;
    leaf(root,lf);
    lft(root,lfs);
    rft(root,rfs);
    vector<int>ans;
    if(root!=NULL&&(root->left!=NULL||root->right!=NULL)) ans.push_back(root->data);
    for(auto it : lfs) ans.push_back(it);
    for(auto it : lf) ans.push_back(it);
    reverse(rfs.begin(),rfs.end());
    for(auto it : rfs) ans.push_back(it);
    
    return ans;
}
